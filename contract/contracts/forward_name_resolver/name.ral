import "std/nft_interface"

Contract Name(
    collectionId: ByteVec,
    nftIndex: U256,
    name: ByteVec,
    mut capitalisation: ByteVec,
    mut address: Address,
    mut expires: U256
) extends Constants() implements IDynamicNFT {

    pub fn getTokenUri() -> ByteVec {
        return b`data:application/json,{"name":"` ++ name ++ b`"}`
    }

    pub fn getNFTIndex() -> U256 {
        return nftIndex
    }

    pub fn getCollectionIndex() -> (ByteVec, U256) {
        return collectionId, nftIndex
    }

    pub fn getCapitalisation() -> ByteVec {
        return capitalisation
    }

    pub fn getExpires() -> U256 {
        return expires
    }

    pub fn getAddress() -> Address {
        return address
    }

    @using(updateFields = true)
    pub fn setAddress(newAddress: Address) -> () {
        let caller = callerContractId!()
        checkCaller!(collectionId == caller, ErrorCodes.OnlyParentAllowed)
        address = newAddress
    }

    @using(updateFields = true)
    pub fn setCapitalisation(newCapitalisation: ByteVec) -> () {
        let caller = callerContractId!()
        checkCaller!(collectionId == caller, ErrorCodes.OnlyParentAllowed)
        capitalisation = newCapitalisation
    }

    @using(updateFields = true)
    pub fn setExpires(newExpires: U256) -> () {
        let caller = callerContractId!()
        checkCaller!(collectionId == caller, ErrorCodes.OnlyParentAllowed)
        expires = newExpires
        emit MetadataUpdated()
    }

    @using(assetsInContract = true)
    pub fn delete(refundAddress: Address) -> () {
        let caller = callerContractId!()
        checkCaller!(collectionId == caller, ErrorCodes.OnlyParentAllowed)
        // we cannot burnToken!() becuase the old owner is not involved in this transaction
        destroySelf!(refundAddress)
    }

    // DynamicNFT methods

    pub fn getName() -> ByteVec {
        return name
    }

    pub fn getDescription() -> ByteVec {
        return b``
    }

    pub fn getImage() -> ByteVec {
        return b``
    }

    pub fn getTraits() -> [Trait; 3] {
        let nameLength = size!(name)
        let cost = if (nameLength > 8) 1 else (9 - nameLength) * 100
        return [
            Trait {
                traitType: b`Expires`,
                value: u256ToString!(expires)
            },
            Trait {
                traitType: b`ANS Cost`,
                value: u256ToString!(cost)
            },
            Trait {
                traitType: b`Length`,
                value: u256ToString!(nameLength)
            }
        ]
    }

    pub fn getTraitCount() -> U256 {
        return 3
    }

    pub fn getTraitAtIndex(index: U256) -> Trait {
        return getTraits()[index]
    }
}