import "std/nft_collection_interface"

Contract Farm(
    cropTemplateId: ByteVec,
    parentId: ByteVec,
    collectionUri: ByteVec,
    renewLength: U256,
    mut totalSupply: U256
) extends Constants(), Events() implements INFTCollection {

    pub fn getCollectionUri() -> ByteVec {
        return collectionUri
    }

    pub fn totalSupply() -> U256 {
        return totalSupply
    }

    @using(checkExternalCaller = false)
    pub fn nftByIndex(index: U256) -> INFT {
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)

        return INFT(nftTokenId)
    }

    pub fn getCrop(index: U256) -> Crop {
        let cropId = subContractId!(toByteVec!(index))
        return Crop(cropId)
    }

    @using(checkExternalCaller = false)
    pub fn validateNFT(nftId: ByteVec, nftIndex: U256) -> () {
        let expectedTokenContract = nftByIndex(nftIndex)
        assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

    pub fn hasExpired(crop: Crop) -> Bool {
        let now = blockTimeStamp!()
        let expires = crop.getExpires()
        return expires < now
    }

    @using(preapprovedAssets = true, updateFields = true)
    pub fn createCrop(minter: Address, rewardTokenAmount: U256) -> U256 {
        let caller = callerContractId!()
        checkCaller!(parentId == caller, ErrorCodes.OnlyParentAllowed)

        totalSupply = totalSupply + 1
        let now = blockTimeStamp!()
        let expires = now + renewLength
        let (encodeImmutableFields, encodeMutableFields) = Crop.encodeFields!(
            selfContractId!(),
            totalSupply,
            u256ToString!(rewardTokenAmount) ++ b` crops`,
            expires
        )

        let _ = copyCreateSubContractWithToken!{minter -> ALPH: tokenRemaining!(minter, ALPH)}(
            toByteVec!(totalSupply),
            cropTemplateId,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            minter
        )

        return totalSupply
    }

    @using(preapprovedAssets = true)
    pub fn deleteCrop(cropOwner: Address, nftIndex: U256) -> () {
        let caller = callerContractId!()
        checkCaller!(parentId == caller, ErrorCodes.OnlyParentAllowed)

        let crop = getCrop(nftIndex)
        let tokenId = tokenId!(crop)
        crop.delete{cropOwner -> tokenId: 1}(cropOwner)
    }
}