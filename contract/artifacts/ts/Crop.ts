/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as CropContractJson } from "../farm/Crop.ral.json";
import { getContractByCodeHash } from "./contracts";

// Custom types for the contract
export namespace CropTypes {
  export type Fields = {
    collectionId: HexString;
    nftIndex: bigint;
    name: HexString;
    expires: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getTokenUri: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getCollectionIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, bigint]>;
    };
    getNFTIndex: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getExpires: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    setExpires: {
      params: CallContractParams<{ newExpires: bigint }>;
      result: CallContractResult<null>;
    };
    delete: {
      params: CallContractParams<{ refundAddress: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };

  export interface SignExecuteMethodTable {
    getTokenUri: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollectionIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getNFTIndex: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getExpires: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    setExpires: {
      params: SignExecuteContractMethodParams<{ newExpires: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    delete: {
      params: SignExecuteContractMethodParams<{ refundAddress: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<CropInstance, CropTypes.Fields> {
  encodeFields(fields: CropTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      []
    );
  }

  getInitialFieldsWithDefaultValues() {
    return this.contract.getInitialFieldsWithDefaultValues() as CropTypes.Fields;
  }

  consts = {
    ErrorCodes: {
      OnlyParentAllowed: BigInt(0),
      NFTNotFound: BigInt(1),
      NFTNotPartOfCollection: BigInt(2),
      OnlyNftOwnerAllowed: BigInt(3),
      NameHasNotExpired: BigInt(4),
      CannotRenewName: BigInt(5),
      TokenAlreadyGenerated: BigInt(6),
      ReverseAddressNotFound: BigInt(7),
      OnlyNftOwnerOrHolderAllowed: BigInt(8),
      IncorrectFarmInputAmount: BigInt(9),
      CropHasNotExpired: BigInt(10),
      FarmInputAmountNotConsumed: BigInt(11),
      FarmAlreadyGenerated: BigInt(12),
    },
    Keys: { Names: "01", Token: "02", Farm: "03" },
  };

  at(address: string): CropInstance {
    return new CropInstance(address);
  }

  tests = {
    getTokenUri: async (
      params: Omit<
        TestContractParamsWithoutMaps<CropTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getTokenUri", params, getContractByCodeHash);
    },
    getCollectionIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<CropTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<[HexString, bigint]>> => {
      return testMethod(
        this,
        "getCollectionIndex",
        params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params: Omit<
        TestContractParamsWithoutMaps<CropTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getNFTIndex", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParamsWithoutMaps<CropTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getExpires: async (
      params: Omit<
        TestContractParamsWithoutMaps<CropTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getExpires", params, getContractByCodeHash);
    },
    setExpires: async (
      params: TestContractParamsWithoutMaps<
        CropTypes.Fields,
        { newExpires: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "setExpires", params, getContractByCodeHash);
    },
    delete: async (
      params: TestContractParamsWithoutMaps<
        CropTypes.Fields,
        { refundAddress: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "delete", params, getContractByCodeHash);
    },
  };
}

// Use this object to test and deploy the contract
export const Crop = new Factory(
  Contract.fromJson(
    CropContractJson,
    "",
    "917eef1cc9857beb73a481c1d1e5eb8145569f68dc7a95a4c605062d76cbb964",
    []
  )
);

// Use this class to interact with the blockchain
export class CropInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<CropTypes.State> {
    return fetchContractState(Crop, this);
  }

  methods = {
    getTokenUri: async (
      params?: CropTypes.CallMethodParams<"getTokenUri">
    ): Promise<CropTypes.CallMethodResult<"getTokenUri">> => {
      return callMethod(
        Crop,
        this,
        "getTokenUri",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollectionIndex: async (
      params?: CropTypes.CallMethodParams<"getCollectionIndex">
    ): Promise<CropTypes.CallMethodResult<"getCollectionIndex">> => {
      return callMethod(
        Crop,
        this,
        "getCollectionIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getNFTIndex: async (
      params?: CropTypes.CallMethodParams<"getNFTIndex">
    ): Promise<CropTypes.CallMethodResult<"getNFTIndex">> => {
      return callMethod(
        Crop,
        this,
        "getNFTIndex",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: CropTypes.CallMethodParams<"getName">
    ): Promise<CropTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Crop,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getExpires: async (
      params?: CropTypes.CallMethodParams<"getExpires">
    ): Promise<CropTypes.CallMethodResult<"getExpires">> => {
      return callMethod(
        Crop,
        this,
        "getExpires",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    setExpires: async (
      params: CropTypes.CallMethodParams<"setExpires">
    ): Promise<CropTypes.CallMethodResult<"setExpires">> => {
      return callMethod(
        Crop,
        this,
        "setExpires",
        params,
        getContractByCodeHash
      );
    },
    delete: async (
      params: CropTypes.CallMethodParams<"delete">
    ): Promise<CropTypes.CallMethodResult<"delete">> => {
      return callMethod(Crop, this, "delete", params, getContractByCodeHash);
    },
  };

  view = this.methods;

  transact = {
    getTokenUri: async (
      params: CropTypes.SignExecuteMethodParams<"getTokenUri">
    ): Promise<CropTypes.SignExecuteMethodResult<"getTokenUri">> => {
      return signExecuteMethod(Crop, this, "getTokenUri", params);
    },
    getCollectionIndex: async (
      params: CropTypes.SignExecuteMethodParams<"getCollectionIndex">
    ): Promise<CropTypes.SignExecuteMethodResult<"getCollectionIndex">> => {
      return signExecuteMethod(Crop, this, "getCollectionIndex", params);
    },
    getNFTIndex: async (
      params: CropTypes.SignExecuteMethodParams<"getNFTIndex">
    ): Promise<CropTypes.SignExecuteMethodResult<"getNFTIndex">> => {
      return signExecuteMethod(Crop, this, "getNFTIndex", params);
    },
    getName: async (
      params: CropTypes.SignExecuteMethodParams<"getName">
    ): Promise<CropTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(Crop, this, "getName", params);
    },
    getExpires: async (
      params: CropTypes.SignExecuteMethodParams<"getExpires">
    ): Promise<CropTypes.SignExecuteMethodResult<"getExpires">> => {
      return signExecuteMethod(Crop, this, "getExpires", params);
    },
    setExpires: async (
      params: CropTypes.SignExecuteMethodParams<"setExpires">
    ): Promise<CropTypes.SignExecuteMethodResult<"setExpires">> => {
      return signExecuteMethod(Crop, this, "setExpires", params);
    },
    delete: async (
      params: CropTypes.SignExecuteMethodParams<"delete">
    ): Promise<CropTypes.SignExecuteMethodResult<"delete">> => {
      return signExecuteMethod(Crop, this, "delete", params);
    },
  };

  async multicall<Calls extends CropTypes.MultiCallParams>(
    calls: Calls
  ): Promise<CropTypes.MultiCallResults<Calls>> {
    return (await multicallMethods(
      Crop,
      this,
      calls,
      getContractByCodeHash
    )) as CropTypes.MultiCallResults<Calls>;
  }
}
